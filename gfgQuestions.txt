class Solution {
    https://practice.geeksforgeeks.org/problems/rat-in-a-maze-problem/1#    
    public static int floodFill(int sr, int sc, int[][] maze, int[][] dir, String[] dirS, ArrayList<String> res, String ans)
    {
        if(sr == maze.length-1 && sc == maze[0].length-1)
        {
            res.add(ans);
            return 1;
        }
        
        maze[sr][sc] = 0; //block
        int count = 0;
        
        for(int d = 0; d < dir.length; d++)
        {
            int r = sr + dir[d][0];
            int c = sc + dir[d][1];
            
            if(r >= 0 && c >= 0 && r < maze.length && c < maze[0].length && maze[r][c] == 1)
            {
                count += floodFill(r, c, maze, dir, dirS, res, ans + dirS[d]);
            }
        }
        
        
        maze[sr][sc] = 1; //unblock
        return count;
    }
    
    public static ArrayList<String> findPath(int[][] m, int n) {
        ArrayList<String> res = new ArrayList<>();
        if(n == 0 || m[0][0] == 0 || m[n-1][n-1] == 0)
        {
            return res;
        }
        
        int[][] dir = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        String[] dirS = { "U", "D", "L", "R"};
        
        
        int count = floodFill(0, 0, m, dir, dirS, res, "");
        Collections.sort(res);
        return res;
        // Your code here
    }

}


https://practice.geeksforgeeks.org/problems/special-matrix4201/1
class Solution
{
    public static int val = (int)1e9 + 7;
    public static int floodFill(int sr, int sc, int[][] dir, int[][] maze)
    {
        if(sr == maze.length-1 && sc == maze[0].length-1)
        {
            return 1;
        }
        
        int count = 0;
        maze[sr][sc] = 1; //block
        
        
        for(int d = 0; d < dir.length; d++)
        {
            int r = sr + dir[d][0];
            int c = sc + dir[d][1];
            
            if(r >= 0 && c >= 0 && r < maze.length && c < maze[0].length && maze[r][c] == 0)
            {
                count = (count % val + floodFill(r, c, dir, maze) % val) % val;
                //count += floodFill(r, c, dir, maze);
            }
        }
        
        maze[sr][sc] = 0;
        return count;
    }
    public int FindWays(int n, int m, int[][] blocked_cells)
    {
        int[][] arr = new int[n][m];
        if(n == 0 || m == 0)
        {
            return 0;
        }
        
        for(int[] cell: blocked_cells)
        {
            int i = cell[0] - 1;
            int j = cell[1] - 1;
            
            arr[i][j] = 1; //blocked means 1
        }
        
        if(arr[n-1][m-1] == 1 || arr[0][0] == 1)
        return 0;
        
        int [][]dir = {{0, 1}, {1, 0}};
        
        int ans = floodFill(0, 0, dir, arr);
        
        return ans;
        // Code here
    }
}